{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Projects/React_Udemy/createReactApp/01-starting-setup/src/components/Expenses/ExpensesList.js\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport './ExpensesList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpensesList = props => {\n  // if the array is empty, show a message by default screen\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 26\n  }, this);\n\n  // OTHERWISE, check if the array has items and update 'expensesContent' to show on screen only the filtered expenses by year\n  if (props.items.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"expenses-list__fallback\",\n      children: \"Found no expenses.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"expenses-list\",\n    children: props.items.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n};\n_c = ExpensesList;\nexport default ExpensesList;\nvar _c;\n$RefreshReg$(_c, \"ExpensesList\");","map":{"version":3,"names":["ExpenseItem","jsxDEV","_jsxDEV","ExpensesList","props","expensesContent","children","fileName","_jsxFileName","lineNumber","columnNumber","items","length","className","map","expense","title","amount","date","id","_c","$RefreshReg$"],"sources":["/home/gabriel/Projects/React_Udemy/createReactApp/01-starting-setup/src/components/Expenses/ExpensesList.js"],"sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\n\nimport './ExpensesList.css';\n\nconst ExpensesList = props => {\n\n    // if the array is empty, show a message by default screen\n    let expensesContent= <p>No expenses found.</p>\n\n\n    // OTHERWISE, check if the array has items and update 'expensesContent' to show on screen only the filtered expenses by year\n    if (props.items.length === 0) {\n        return <p className=\"expenses-list__fallback\">Found no expenses.</p>\n    }\n\n    return <ul className=\"expenses-list\">\n        {props.items.map((expense) => (\n        <ExpenseItem \n            key={expense.id}\n            title={expense.title} \n            amount={expense.amount} \n            date={expense.date}\n            />\n        ))}\n    </ul>\n};\n\nexport default ExpensesList;"],"mappings":";AAAA,OAAOA,WAAW,MAAM,eAAe;AAEvC,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAGC,KAAK,IAAI;EAE1B;EACA,IAAIC,eAAe,gBAAEH,OAAA;IAAAI,QAAA,EAAG;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAI;;EAG9C;EACA,IAAIN,KAAK,CAACO,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,oBAAOV,OAAA;MAAGW,SAAS,EAAC,yBAAyB;MAAAP,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EACxE;EAEA,oBAAOR,OAAA;IAAIW,SAAS,EAAC,eAAe;IAAAP,QAAA,EAC/BF,KAAK,CAACO,KAAK,CAACG,GAAG,CAAEC,OAAO,iBACzBb,OAAA,CAACF,WAAW;MAERgB,KAAK,EAAED,OAAO,CAACC,KAAM;MACrBC,MAAM,EAAEF,OAAO,CAACE,MAAO;MACvBC,IAAI,EAAEH,OAAO,CAACG;IAAK,GAHdH,OAAO,CAACI,EAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAKlB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AACT,CAAC;AAACU,EAAA,GArBIjB,YAAY;AAuBlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}